name: Publish VS Code Extension

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Extension
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Compile TypeScript
        run: npm run compile

      - name: Setup display for tests (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        run: xvfb-run -a npm test

      - name: Run tests (Windows/macOS)
        if: runner.os != 'Linux'
        run: npm test

  package:
    name: Package Extension
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.package-version.outputs.version }}
      vsix-file: ${{ steps.package-version.outputs.vsix-file }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install VSCE
        run: npm install -g @vscode/vsce

      - name: Get version from tag or input
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          npm version ${{ steps.get-version.outputs.version }} --no-git-tag-version

      - name: Package extension
        id: package-version
        run: |
          VSIX_FILE="yaml-doctor-${{ steps.get-version.outputs.version }}.vsix"
          vsce package --out $VSIX_FILE
          echo "vsix-file=$VSIX_FILE" >> $GITHUB_OUTPUT
          echo "version=${{ steps.get-version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix-package
          path: "*.vsix"
          retention-days: 30

  publish-marketplace:
    name: Publish to VS Code Marketplace
    runs-on: ubuntu-latest
    needs: [test, package]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install VSCE
        run: npm install -g @vscode/vsce

      - name: Download VSIX artifact
        uses: actions/download-artifact@v4
        with:
          name: vsix-package

      - name: Publish to VS Code Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          vsce publish --packagePath ${{ needs.package.outputs.vsix-file }}

  publish-openvsx:
    name: Publish to Open VSX Registry
    runs-on: ubuntu-latest
    needs: [test, package]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install OVSX
        run: npm install -g ovsx

      - name: Download VSIX artifact
        uses: actions/download-artifact@v4
        with:
          name: vsix-package

      - name: Publish to Open VSX Registry
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
        run: |
          ovsx publish ${{ needs.package.outputs.vsix-file }} --pat $OVSX_PAT

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [package, publish-marketplace]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download VSIX artifact
        uses: actions/download-artifact@v4
        with:
          name: vsix-package

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release v${{ needs.package.outputs.version }}"
          tag_name: "v${{ needs.package.outputs.version }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ${{ needs.package.outputs.vsix-file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
